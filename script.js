/**
 * ðŸ¤– AI-Generated Project: Minimalist Homepage
 * Generated by: Claude Sonnet 4 (Anthropic)
 * Date: 2024
 * Description: Clean, minimalist, dark-mode homepage with clock, search, music player, and to-do list
 * Tech Stack: Vanilla HTML/CSS/JS + Tailwind CSS
 * License: MIT
 */

// Minimalist Homepage - Main JavaScript

// ============================================================================
// CLOCK WIDGET (Ticket 2)
// ============================================================================

/**
 * Updates the clock display with current time
 */
function updateClock() {
    const clockElement = document.getElementById('clock');
    const now = new Date();
    const timeString = now.toLocaleTimeString('en-GB'); // 24-hour format
    clockElement.textContent = timeString;
}

// Initialize clock and update every second
updateClock();
setInterval(updateClock, 1000);

// ============================================================================
// SEARCH FUNCTIONALITY (Ticket 3)
// ============================================================================

// Search engine configurations
const searchEngines = {
    google: "https://www.google.com/search?q=",
    duckduckgo: "https://duckduckgo.com/?q=",
    startpage: "https://www.startpage.com/sp/search?query="
};

/**
 * Handles search form submission
 * @param {Event} event - Form submit event
 */
function handleSearch(event) {
    event.preventDefault();
    
    const query = document.getElementById('searchInput').value.trim();
    const selectedEngine = document.getElementById('searchEngine').value;
    
    if (!query) {
        alert('Please enter a search query');
        return;
    }
    
    // Save search engine preference
    localStorage.setItem('searchEngine', selectedEngine);
    
    // Redirect to search engine
    const searchUrl = searchEngines[selectedEngine] + encodeURIComponent(query);
    window.location.href = searchUrl;
}

/**
 * Loads saved search engine preference
 */
function loadSearchPreference() {
    const savedEngine = localStorage.getItem('searchEngine');
    if (savedEngine && searchEngines[savedEngine]) {
        document.getElementById('searchEngine').value = savedEngine;
    }
}

// Initialize search functionality
document.getElementById('searchForm').addEventListener('submit', handleSearch);
loadSearchPreference();

// ============================================================================
// YOUTUBE MUSIC PLAYER (Ticket 4)
// ============================================================================

/**
 * Handles YouTube Music playlist button click
 * Note: Replace PLAYLIST_ID with actual playlist ID
 */
function handleMusicPlay() {
    const playlistId = 'PLAYLIST_ID'; // TODO: Replace with actual playlist ID
    const musicUrl = `https://music.youtube.com/playlist?list=RDCLAK5uy_nFD4lodGvr1kb0xlJOOfEi0tGWI7cQKK0&play=1`;
    window.open(musicUrl, '_blank');
}

// Initialize YouTube Music functionality
document.getElementById('playMusicBtn').addEventListener('click', handleMusicPlay);

// ============================================================================
// TO-DO LIST FUNCTIONALITY (Tickets 5-6)
// ============================================================================

let todoTasks = [];

/**
 * Generates a unique ID for todo items
 * @returns {string} Unique ID
 */
function generateTodoId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

/**
 * Saves todo tasks to localStorage
 */
function saveTodos() {
    localStorage.setItem('todoList', JSON.stringify(todoTasks));
}

/**
 * Loads todo tasks from localStorage
 */
function loadTodos() {
    const saved = localStorage.getItem('todoList');
    if (saved) {
        todoTasks = JSON.parse(saved);
        renderTodos();
    }
}

/**
 * Renders all todo tasks to the DOM
 */
function renderTodos() {
    const todoList = document.getElementById('todoList');
    todoList.innerHTML = '';
    
    todoTasks.forEach(task => {
        const taskElement = createTodoElement(task);
        todoList.appendChild(taskElement);
    });
}

/**
 * Creates a DOM element for a todo task
 * @param {Object} task - Task object with id, text, and completed properties
 * @returns {HTMLElement} Task element
 */
function createTodoElement(task) {
    const taskDiv = document.createElement('div');
    taskDiv.className = 'flex items-center gap-3 p-2 bg-gray-800 rounded-lg';
    
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.className = 'todo-checkbox';
    checkbox.checked = task.completed;
    checkbox.addEventListener('change', () => toggleTodo(task.id));
    
    const textSpan = document.createElement('span');
    textSpan.className = `flex-1 ${task.completed ? 'line-through text-gray-500' : 'text-gray-200'}`;
    textSpan.textContent = task.text;
    
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'text-red-400 hover:text-red-300 transition-colors duration-200';
    deleteBtn.innerHTML = `
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
    `;
    deleteBtn.addEventListener('click', () => deleteTodo(task.id));
    
    taskDiv.appendChild(checkbox);
    taskDiv.appendChild(textSpan);
    taskDiv.appendChild(deleteBtn);
    
    return taskDiv;
}

/**
 * Adds a new todo task
 * @param {string} text - Task text
 */
function addTodo(text) {
    if (!text.trim()) {
        alert('Please enter a task');
        return;
    }
    
    const newTask = {
        id: generateTodoId(),
        text: text.trim(),
        completed: false
    };
    
    todoTasks.push(newTask);
    saveTodos();
    renderTodos();
}

/**
 * Toggles the completion status of a todo task
 * @param {string} taskId - Task ID to toggle
 */
function toggleTodo(taskId) {
    const task = todoTasks.find(t => t.id === taskId);
    if (task) {
        task.completed = !task.completed;
        saveTodos();
        renderTodos();
    }
}

/**
 * Deletes a todo task
 * @param {string} taskId - Task ID to delete
 */
function deleteTodo(taskId) {
    todoTasks = todoTasks.filter(t => t.id !== taskId);
    saveTodos();
    renderTodos();
}

/**
 * Handles todo form submission
 * @param {Event} event - Form submit event
 */
function handleTodoSubmit(event) {
    event.preventDefault();
    
    const input = document.getElementById('todoInput');
    const text = input.value;
    
    addTodo(text);
    input.value = '';
    input.focus();
}

// Initialize todo functionality
document.getElementById('todoForm').addEventListener('submit', handleTodoSubmit);
loadTodos();

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * Shows a simple alert message (can be enhanced with a proper toast notification)
 * @param {string} message - Message to display
 */
function showMessage(message) {
    alert(message); // TODO: Replace with proper toast notification
}

// ============================================================================
// INITIALIZATION
// ============================================================================

/**
 * Initialize all components when DOM is loaded
 */
function initializeApp() {
    // All initialization is handled by individual component functions above
    // This function can be used for any app-wide initialization in the future
}

// Run initialization when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
} 