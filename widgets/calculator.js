/**
 * ü§ñ AI-Generated Project: Minimalist Homepage
 * Generated by: Claude Sonnet 4 (Anthropic)
 * Date: 2024
 * Description: Calculator Widget - Full-featured calculator with keyboard support
 * Tech Stack: Vanilla HTML/CSS/JS + Tailwind CSS
 * License: MIT
 */

// ============================================================================
// CALCULATOR WIDGET (Ticket 7)
// ============================================================================

class Calculator {
    constructor() {
        this.displayValue = '0';
        this.previousValue = null;
        this.operation = null;
        this.waitingForOperand = false;
        this.previousCalculation = '';
        
        this.displayElement = document.getElementById('calcDisplay');
        this.previousElement = document.getElementById('calcPrevious');
        
        this.initializeEventListeners();
    }
    
    /**
     * Initialize event listeners for calculator buttons and keyboard
     */
    initializeEventListeners() {
        // Button click events
        document.querySelectorAll('.calc-btn').forEach(button => {
            button.addEventListener('click', (e) => this.handleButtonClick(e));
        });
        
        // Keyboard events (with proper scoping)
        document.addEventListener('keydown', (e) => this.handleKeyboardInput(e));
    }
    
    /**
     * Handle button click events
     */
    handleButtonClick(event) {
        const button = event.currentTarget;
        const type = button.dataset.type;
        const value = button.dataset.value;
        
        this.processInput(type, value);
        this.updateDisplay();
    }
    
    /**
     * Handle keyboard input with proper scoping
     */
    handleKeyboardInput(event) {
        // Only handle calculator keys when no other input is active
        if (document.activeElement.tagName === 'INPUT') return;
        
        const key = event.key;
        const keyMap = {
            '0': { type: 'digit', value: '0' },
            '1': { type: 'digit', value: '1' },
            '2': { type: 'digit', value: '2' },
            '3': { type: 'digit', value: '3' },
            '4': { type: 'digit', value: '4' },
            '5': { type: 'digit', value: '5' },
            '6': { type: 'digit', value: '6' },
            '7': { type: 'digit', value: '7' },
            '8': { type: 'digit', value: '8' },
            '9': { type: 'digit', value: '9' },
            '.': { type: 'decimal', value: '.' },
            '+': { type: 'operation', value: '+' },
            '-': { type: 'operation', value: '-' },
            '*': { type: 'operation', value: '√ó' },
            '/': { type: 'operation', value: '√∑' },
            'Enter': { type: 'equals', value: '=' },
            '=': { type: 'equals', value: '=' },
            'Escape': { type: 'clear', value: 'C' },
            'Backspace': { type: 'backspace', value: '‚Üê' }
        };
        
        if (keyMap[key]) {
            event.preventDefault();
            this.processInput(keyMap[key].type, keyMap[key].value);
            this.updateDisplay();
        }
    }
    
    /**
     * Process input based on type and value
     */
    processInput(type, value) {
        switch (type) {
            case 'digit':
                this.inputDigit(value);
                break;
            case 'decimal':
                this.inputDecimal();
                break;
            case 'operation':
                this.performOperation(value);
                break;
            case 'clear':
                this.clear(value === 'CE' ? 'entry' : 'all');
                break;
            case 'backspace':
                this.backspace();
                break;
            case 'equals':
                this.calculate();
                break;
        }
    }
    
    /**
     * Handle digit input
     */
    inputDigit(digit) {
        if (this.waitingForOperand) {
            this.displayValue = digit;
            this.waitingForOperand = false;
        } else {
            this.displayValue = this.displayValue === '0' ? digit : this.displayValue + digit;
        }
    }
    
    /**
     * Handle decimal point input
     */
    inputDecimal() {
        if (this.waitingForOperand) {
            this.displayValue = '0.';
            this.waitingForOperand = false;
            return;
        }
        
        if (!this.displayValue.includes('.')) {
            this.displayValue += '.';
        }
    }
    
    /**
     * Handle backspace
     */
    backspace() {
        if (this.waitingForOperand) return;
        
        if (this.displayValue.length === 1) {
            this.displayValue = '0';
        } else {
            this.displayValue = this.displayValue.slice(0, -1);
        }
    }
    
    /**
     * Perform mathematical operation
     */
    performOperation(nextOperation) {
        const inputValue = parseFloat(this.displayValue);
        
        if (this.previousValue === null) {
            this.previousValue = inputValue;
        } else if (this.operation) {
            const result = this.calculate(this.previousValue, inputValue, this.operation);
            this.displayValue = String(result);
            this.previousValue = result;
        }
        
        this.waitingForOperand = true;
        this.operation = nextOperation;
        this.updatePreviousCalculation();
    }
    
    /**
     * Perform calculation between two values
     */
    calculate(firstValue = null, secondValue = null, operation = null) {
        const inputValue = parseFloat(this.displayValue);
        
        if (firstValue === null) {
            // Final calculation (equals button)
            if (this.previousValue === null || this.operation === null) {
                return inputValue;
            }
            
            const result = this.calculate(this.previousValue, inputValue, this.operation);
            this.displayValue = String(result);
            this.previousValue = null;
            this.operation = null;
            this.waitingForOperand = true;
            this.previousCalculation = '';
            return result;
        } else {
            // Intermediate calculation
            switch (operation) {
                case '+':
                    return firstValue + secondValue;
                case '-':
                    return firstValue - secondValue;
                case '√ó':
                    return firstValue * secondValue;
                case '√∑':
                    if (secondValue === 0) {
                        this.displayValue = 'Error';
                        this.previousValue = null;
                        this.operation = null;
                        this.waitingForOperand = true;
                        return 'Error';
                    }
                    return firstValue / secondValue;
                case '%':
                    return firstValue % secondValue;
                case '‚àö':
                    if (secondValue < 0) {
                        this.displayValue = 'Error';
                        this.previousValue = null;
                        this.operation = null;
                        this.waitingForOperand = true;
                        return 'Error';
                    }
                    return Math.sqrt(secondValue);
                default:
                    return secondValue;
            }
        }
    }
    
    /**
     * Clear calculator state
     */
    clear(type = 'all') {
        if (type === 'all') {
            this.displayValue = '0';
            this.previousValue = null;
            this.operation = null;
            this.waitingForOperand = false;
            this.previousCalculation = '';
        } else {
            // Clear entry only
            this.displayValue = '0';
            this.waitingForOperand = false;
        }
    }
    
    /**
     * Update the previous calculation display
     */
    updatePreviousCalculation() {
        if (this.previousValue !== null && this.operation) {
            this.previousCalculation = `${this.previousValue} ${this.operation}`;
        }
    }
    
    /**
     * Update the calculator display
     */
    updateDisplay() {
        if (this.displayElement) {
            this.displayElement.textContent = this.displayValue;
        }
        
        if (this.previousElement) {
            this.previousElement.textContent = this.previousCalculation;
        }
    }
}

// Initialize calculator immediately (widget loader ensures DOM is ready)
let calculator;
calculator = new Calculator(); 