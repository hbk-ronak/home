/**
 * ðŸ¤– AI-Generated Project: Minimalist Homepage
 * Generated by: Claude Sonnet 4 (Anthropic)
 * Date: 2024
 * Description: Notes Widget - Sticky notes with color options
 * Tech Stack: Vanilla HTML/CSS/JS + Tailwind CSS
 * License: MIT
 */

// ============================================================================
// STICKY NOTES FUNCTIONALITY (Ticket 11)
// ============================================================================

let stickyNotes = [];

// Color options for sticky notes
const noteColors = [
    { name: 'yellow', class: 'bg-yellow-200 text-yellow-900' },
    { name: 'pink', class: 'bg-pink-200 text-pink-900' },
    { name: 'blue', class: 'bg-blue-200 text-blue-900' },
    { name: 'green', class: 'bg-green-200 text-green-900' }
];

/**
 * Generates a unique ID for sticky notes
 * @returns {string} Unique ID
 */
function generateNoteId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

/**
 * Saves sticky notes to localStorage
 */
function saveNotes() {
    localStorage.setItem('stickyNotes', JSON.stringify(stickyNotes));
}

/**
 * Loads sticky notes from localStorage
 */
function loadNotes() {
    const saved = localStorage.getItem('stickyNotes');
    if (saved) {
        stickyNotes = JSON.parse(saved);
        renderNotes();
    }
}

/**
 * Renders all sticky notes to the DOM
 */
function renderNotes() {
    const notesGrid = document.getElementById('notesGrid');
    notesGrid.innerHTML = '';
    
    stickyNotes.forEach(note => {
        const noteElement = createNoteElement(note);
        notesGrid.appendChild(noteElement);
    });
}

/**
 * Creates a DOM element for a sticky note
 * @param {Object} note - Note object with id, text, color, and createdAt properties
 * @returns {HTMLElement} Note element
 */
function createNoteElement(note) {
    const noteDiv = document.createElement('div');
    const colorClass = noteColors.find(c => c.name === note.color)?.class || noteColors[0].class;
    
    noteDiv.className = `p-3 rounded-lg shadow-md relative group ${colorClass}`;
    noteDiv.innerHTML = `
        <div class="text-sm font-medium mb-2">${note.text}</div>
        <button class="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-gray-600 hover:text-gray-800">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
    `;
    
    // Add delete functionality
    const deleteBtn = noteDiv.querySelector('button');
    deleteBtn.addEventListener('click', () => deleteNote(note.id));
    
    return noteDiv;
}

/**
 * Adds a new sticky note
 * @param {string} text - Note text
 * @param {string} color - Note color
 */
function addNote(text, color) {
    if (!text.trim()) {
        alert('Please enter a note');
        return;
    }
    
    const newNote = {
        id: generateNoteId(),
        text: text.trim(),
        color: color,
        createdAt: Date.now()
    };
    
    stickyNotes.push(newNote);
    saveNotes();
    renderNotes();
}

/**
 * Deletes a sticky note
 * @param {string} noteId - Note ID to delete
 */
function deleteNote(noteId) {
    stickyNotes = stickyNotes.filter(n => n.id !== noteId);
    saveNotes();
    renderNotes();
}

/**
 * Handles note form submission
 * @param {Event} event - Form submit event
 */
function handleNoteSubmit(event) {
    event.preventDefault();
    
    const input = document.getElementById('noteInput');
    const colorSelect = document.getElementById('noteColor');
    const text = input.value;
    const color = colorSelect.value;
    
    addNote(text, color);
    input.value = '';
    input.focus();
}

// Initialize sticky notes functionality
document.getElementById('noteForm').addEventListener('submit', handleNoteSubmit);
loadNotes(); 