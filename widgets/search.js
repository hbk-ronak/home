/**
 * 🤖 AI-Generated Project: Minimalist Homepage
 * Generated by: Claude Sonnet 4 (Anthropic)
 * Date: 2024
 * Description: Search Widget - Multi-engine search with bang commands and easter eggs
 * Tech Stack: Vanilla HTML/CSS/JS + Tailwind CSS
 * License: MIT
 */

// ============================================================================
// SEARCH FUNCTIONALITY (Tickets 3, 9)
// ============================================================================

// Search engine configurations
const searchEngines = {
    google: "https://www.google.com/search?q=",
    duckduckgo: "https://duckduckgo.com/?q=",
    startpage: "https://www.startpage.com/sp/search?query="
};

// Search engine icons and names
const searchEngineData = {
    google: {
        name: 'Google',
        icon: `<svg class="w-5 h-5" viewBox="0 0 24 24">
            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>`
    },
    duckduckgo: {
        name: 'DuckDuckGo',
        icon: `<svg class="w-5 h-5" viewBox="0 0 24 24" fill="#DE5833">
            <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 2c5.514 0 10 4.486 10 10s-4.486 10-10 10S2 17.514 2 12 6.486 2 12 2zm0 3c-3.866 0-7 3.134-7 7s3.134 7 7 7 7-3.134 7-7-3.134-7-7-7zm0 2c2.761 0 5 2.239 5 5s-2.239 5-5 5-5-2.239-5-5 2.239-5 5-5z"/>
        </svg>`
    },
    startpage: {
        name: 'Startpage',
        icon: `<svg class="w-5 h-5" viewBox="0 0 24 24" fill="#00A4DC">
            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
        </svg>`
    }
};

// Bang pattern for quick engine selection
const bangPattern = /^!(\w+)\s+(.*)$/;

// Bang to engine mapping
const bangEngines = {
    'g': 'google',
    'd': 'duckduckgo',
    's': 'startpage'
};

// Easter egg pattern and commands
const easterEggPattern = /^:(\w+)/;
const easterEggCommands = {
    'roll': () => Math.floor(Math.random() * 6) + 1,
    'flip': () => Math.random() < 0.5 ? 'Heads' : 'Tails',
    'ascii': () => '😊'
};

let currentSearchEngine = 'google';
let isDropdownOpen = false; // Track dropdown state globally

/**
 * Shows easter egg result in the output area
 * @param {string} result - The result to display
 */
function showEasterEggResult(result) {
    const outputArea = document.getElementById('easterEggOutput');
    const outputText = document.getElementById('easterEggResult');
    
    if (outputArea && outputText) {
        outputText.textContent = result;
        outputArea.classList.remove('hidden');
    } else {
        console.error('❌ Easter egg output elements not found!');
    }
}

/**
 * Hides the easter egg output area
 */
function hideEasterEggResult() {
    const outputArea = document.getElementById('easterEggOutput');
    
    if (outputArea) {
        outputArea.classList.add('hidden');
    } else {
        console.error('❌ Easter egg output element not found!');
    }
}

/**
 * Handles clicking outside the search engine dropdown to close it
 * @param {Event} event - Click event
 */
function handleClickOutsideDropdown(event) {
    const dropdown = document.getElementById('searchEngineDropdown');
    const toggle = document.getElementById('searchEngineToggle');
    
    if (dropdown && !dropdown.contains(event.target) && !toggle.contains(event.target)) {
        closeSearchEngineDropdown();
    }
}

/**
 * Updates the search engine display
 * @param {string} engine - Search engine key
 */
function updateSearchEngineDisplay(engine) {
    const iconElement = document.getElementById('searchEngineIcon');
    const nameElement = document.getElementById('searchEngineName');
    const inputElement = document.getElementById('searchInput');
    
    if (iconElement && nameElement && inputElement) {
        const engineData = searchEngineData[engine];
        iconElement.innerHTML = engineData.icon;
        nameElement.textContent = engineData.name;
        inputElement.placeholder = `Search with ${engineData.name} or enter address`;
        currentSearchEngine = engine;
    }
}

/**
 * Toggles the search engine dropdown
 */
function toggleSearchEngineDropdown() {
    try {
        isDropdownOpen = !isDropdownOpen;
        if (isDropdownOpen) {
            const dropdown = document.getElementById('searchEngineDropdown');
            if (dropdown) {
                dropdown.classList.remove('hidden');
            } else {
                console.error('Dropdown element not found');
                isDropdownOpen = false;
            }
        } else {
            const dropdown = document.getElementById('searchEngineDropdown');
            if (dropdown) {
                dropdown.classList.add('hidden');
            }
        }
    } catch (error) {
        console.error('Error toggling dropdown:', error);
        isDropdownOpen = false;
    }
}

/**
 * Closes the search engine dropdown
 */
function closeSearchEngineDropdown() {
    try {
        isDropdownOpen = false;
        const dropdown = document.getElementById('searchEngineDropdown');
        if (dropdown) {
            dropdown.classList.add('hidden');
        }
    } catch (error) {
        console.error('Error closing dropdown:', error);
    }
}

/**
 * Handles search engine selection from dropdown
 * @param {string} engine - Selected search engine
 */
function selectSearchEngine(engine) {
    updateSearchEngineDisplay(engine);
    localStorage.setItem('searchEngine', engine);
    closeSearchEngineDropdown();
}

/**
 * Handles search form submission with bang support
 * @param {Event} event - Form submit event
 */
function handleSearch(event) {
    event.preventDefault();
    
    const query = document.getElementById('searchInput').value.trim();
    
    if (!query) {
        alert('Please enter a search query');
        return;
    }
    
    // Check for easter egg commands first
    const easterEggMatch = query.match(easterEggPattern);
    if (easterEggMatch) {
        const command = easterEggMatch[1];
        if (easterEggCommands[command]) {
            const result = easterEggCommands[command]();
            showEasterEggResult(result);
            document.getElementById('searchInput').value = '';
            return;
        } else {
            alert(`Unknown command: ${command}`);
            return;
        }
    }
    
    // Check for bang commands (e.g., !g javascript, !d cats)
    const bangMatch = query.match(bangPattern);
    if (bangMatch) {
        const bangCommand = bangMatch[1].toLowerCase();
        const searchQuery = bangMatch[2].trim();
        
        if (bangEngines[bangCommand]) {
            const selectedEngine = bangEngines[bangCommand];
            updateSearchEngineDisplay(selectedEngine);
            localStorage.setItem('searchEngine', selectedEngine);
        } else {
            // Invalid bang command, use current engine
            alert(`Unknown search command: !${bangCommand}. Using current engine.`);
        }
        
        // Use the query without the bang command
        const searchUrl = searchEngines[currentSearchEngine] + encodeURIComponent(searchQuery);
        window.location.href = searchUrl;
        return;
    }
    
    // No bang command, use current engine
    const searchUrl = searchEngines[currentSearchEngine] + encodeURIComponent(query);
    window.location.href = searchUrl;
}

/**
 * Loads saved search engine preference
 */
function loadSearchPreference() {
    const savedEngine = localStorage.getItem('searchEngine');
    if (savedEngine) {
        updateSearchEngineDisplay(savedEngine);
    } else {
        updateSearchEngineDisplay('google');
    }
}

// Initialize search functionality
document.getElementById('searchForm').addEventListener('submit', handleSearch);
document.getElementById('searchEngineToggle').addEventListener('click', toggleSearchEngineDropdown);

// Add event listeners for search engine options
document.querySelectorAll('.search-engine-option').forEach(option => {
    option.addEventListener('click', () => {
        selectSearchEngine(option.dataset.engine);
    });
});

// Close dropdown when clicking outside
document.addEventListener('click', handleClickOutsideDropdown);

loadSearchPreference();

// Initialize dropdown state on page load
isDropdownOpen = false;

// Focus search input on page load
document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.focus();
    }
}); 