/**
 * 🤖 AI-Generated Project: Minimalist Homepage
 * Generated by: Claude Sonnet 4 (Anthropic)
 * Date: 2024
 * Description: Network Security Module - Blocks all outgoing network requests
 * Tech Stack: Vanilla HTML/CSS/JS + Tailwind CSS
 * License: MIT
 */

// ============================================================================
// NETWORK SECURITY - BLOCK ALL OUTGOING CALLS
// ============================================================================

/**
 * Network Security Monitor - Blocks all outgoing network requests
 * This ensures the webpage remains completely static and privacy-focused
 */
class NetworkSecurityMonitor {
    constructor() {
        this.blockNetworkRequests();
        this.monitorFetch();
        this.monitorXMLHttpRequest();
        this.monitorWebSocket();
        this.monitorBeacon();
        this.monitorImageLoading();
        this.monitorScriptLoading();
        this.monitorLinkNavigation();
        console.log('🛡️ Network security monitor initialized - all outgoing calls blocked');
    }
    
    /**
     * Block fetch requests
     */
    monitorFetch() {
        const originalFetch = window.fetch;
        window.fetch = (...args) => {
            console.warn('🚫 BLOCKED: Fetch request attempted:', args[0]);
            throw new Error('Network requests are blocked for privacy and security');
        };
    }
    
    /**
     * Block XMLHttpRequest
     */
    monitorXMLHttpRequest() {
        const originalOpen = XMLHttpRequest.prototype.open;
        XMLHttpRequest.prototype.open = function(method, url, ...args) {
            console.warn('🚫 BLOCKED: XMLHttpRequest attempted:', url);
            throw new Error('Network requests are blocked for privacy and security');
        };
    }
    
    /**
     * Block WebSocket connections
     */
    monitorWebSocket() {
        const originalWebSocket = window.WebSocket;
        window.WebSocket = function(url, ...args) {
            console.warn('🚫 BLOCKED: WebSocket connection attempted:', url);
            throw new Error('WebSocket connections are blocked for privacy and security');
        };
    }
    
    /**
     * Block navigator.sendBeacon
     */
    monitorBeacon() {
        if (navigator.sendBeacon) {
            const originalBeacon = navigator.sendBeacon;
            navigator.sendBeacon = function(url, data) {
                console.warn('🚫 BLOCKED: Beacon request attempted:', url);
                return false; // Block beacon requests
            };
        }
    }
    
    /**
     * Block external image loading
     */
    monitorImageLoading() {
        const originalImage = window.Image;
        window.Image = function(...args) {
            const img = new originalImage(...args);
            if (args[0] && typeof args[0] === 'string' && !this.isLocalResource(args[0])) {
                console.warn('🚫 BLOCKED: External image load attempted:', args[0]);
                throw new Error('External image loading is blocked for privacy and security');
            }
            return img;
        };
    }
    
    /**
     * Block external script loading
     */
    monitorScriptLoading() {
        const originalCreateElement = document.createElement;
        document.createElement = function(tagName) {
            const element = originalCreateElement.call(document, tagName);
            if (tagName.toLowerCase() === 'script') {
                const originalSetAttribute = element.setAttribute;
                element.setAttribute = function(name, value) {
                    if (name === 'src' && typeof value === 'string' && !this.isLocalResource(value)) {
                        console.warn('🚫 BLOCKED: External script load attempted:', value);
                        throw new Error('External script loading is blocked for privacy and security');
                    }
                    return originalSetAttribute.call(this, name, value);
                };
            }
            return element;
        };
    }
    
    /**
     * Block external link navigation
     */
    monitorLinkNavigation() {
        document.addEventListener('click', (event) => {
            const link = event.target.closest('a');
            if (link && link.href && !this.isLocalResource(link.href)) {
                console.warn('🚫 BLOCKED: External link navigation attempted:', link.href);
                event.preventDefault();
                alert('External links are blocked for privacy and security');
            }
        });
    }
    
    /**
     * Check if a resource is local (blob, data, or same origin)
     */
    isLocalResource(url) {
        return url.startsWith('blob:') || 
               url.startsWith('data:') || 
               url.startsWith('#') ||
               url.startsWith('javascript:') ||
               url === '' ||
               url === window.location.origin ||
               url.startsWith(window.location.origin);
    }
    
    /**
     * Block all network requests
     */
    blockNetworkRequests() {
        // Additional blocking for any other network-related APIs
        if (window.navigator.serviceWorker) {
            const originalRegister = navigator.serviceWorker.register;
            navigator.serviceWorker.register = function(scriptURL, options) {
                console.warn('🚫 BLOCKED: Service Worker registration attempted:', scriptURL);
                throw new Error('Service Worker registration is blocked for privacy and security');
            };
        }
    }
}

// Initialize network security monitor immediately when script loads
const networkSecurityMonitor = new NetworkSecurityMonitor();

// Export for potential use in other modules
window.NetworkSecurityMonitor = NetworkSecurityMonitor; 