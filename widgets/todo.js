/**
 * ðŸ¤– AI-Generated Project: Minimalist Homepage
 * Generated by: Claude Sonnet 4 (Anthropic)
 * Date: 2024
 * Description: Todo Widget - Task management with date picker and filtering
 * Tech Stack: Vanilla HTML/CSS/JS + Tailwind CSS
 * License: MIT
 */

// ============================================================================
// TO-DO LIST FUNCTIONALITY (Tickets 5, 6) - REFACTORED FOR UNIFIED TASK STORE
// ============================================================================

let currentTodoFilter = 'all';

/**
 * Renders all todo tasks to the DOM based on current filter
 */
function renderTodos() {
    const todoList = document.getElementById('todoList');
    if (!todoList) return;
    
    todoList.innerHTML = '';
    
    let tasks = [];
    switch (currentTodoFilter) {
        case 'dated':
            tasks = window.taskStore.getDatedTasks();
            break;
        case 'undated':
            tasks = window.taskStore.getUndatedTasks();
            break;
        case 'today':
            tasks = window.taskStore.getTasksForToday();
            break;
        default:
            tasks = window.taskStore.getTasks();
            break;
    }
    
    tasks.forEach(task => {
        const taskElement = createTodoElement(task);
        todoList.appendChild(taskElement);
    });
}

/**
 * Handles todo filter change
 * @param {Event} event - Change event
 */
function handleTodoFilterChange(event) {
    currentTodoFilter = event.target.value;
    renderTodos();
}

/**
 * Loads todo filter preference from localStorage
 */
function loadTodoFilterPreference() {
    const savedFilter = localStorage.getItem('todoFilter');
    if (savedFilter) {
        currentTodoFilter = savedFilter;
        const filterSelect = document.getElementById('todoFilter');
        if (filterSelect) {
            filterSelect.value = currentTodoFilter;
        }
    }
}

/**
 * Saves todo filter preference to localStorage
 */
function saveTodoFilterPreference() {
    localStorage.setItem('todoFilter', currentTodoFilter);
}

/**
 * Creates a DOM element for a todo task
 * @param {Object} task - Task object with id, text, completed, and dueDate properties
 * @returns {HTMLElement} Task element
 */
function createTodoElement(task) {
    const taskDiv = document.createElement('div');
    taskDiv.className = 'flex items-center gap-3 p-2 bg-gray-800 rounded-lg';
    
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.className = 'todo-checkbox';
    checkbox.checked = task.completed;
    checkbox.addEventListener('change', () => toggleTodo(task.id));
    
    const textSpan = document.createElement('span');
    textSpan.className = `flex-1 ${task.completed ? 'line-through text-gray-500' : 'text-gray-200'}`;
    textSpan.textContent = task.text;
    
    // Add due date display if present
    if (task.dueDate) {
        const dueDateSpan = document.createElement('span');
        dueDateSpan.className = `text-xs ${task.completed ? 'text-gray-500' : 'text-blue-400'}`;
        dueDateSpan.textContent = ` (${formatDate(task.dueDate)})`;
        textSpan.appendChild(dueDateSpan);
    }
    
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'text-red-400 hover:text-red-300 transition-colors duration-200';
    deleteBtn.innerHTML = `
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
    `;
    deleteBtn.addEventListener('click', () => deleteTodo(task.id));
    
    taskDiv.appendChild(checkbox);
    taskDiv.appendChild(textSpan);
    taskDiv.appendChild(deleteBtn);
    
    return taskDiv;
}

/**
 * Adds a new todo task
 * @param {string} text - Task text
 * @param {string|null} dueDate - Due date in 'YYYY-MM-DD' format (optional)
 */
function addTodo(text, dueDate = null) {
    if (!text.trim()) {
        alert('Please enter a task');
        return;
    }
    
    const taskData = {
        text: text.trim(),
        dueDate: dueDate
    };
    
    window.taskStore.addTask(taskData);
    renderTodos();
    renderCalendar(); // Update calendar to show new task
}

/**
 * Toggles the completion status of a todo task
 * @param {string} taskId - Task ID to toggle
 */
function toggleTodo(taskId) {
    window.taskStore.toggleTask(taskId);
    renderTodos();
    renderCalendar(); // Update calendar to reflect completion
}

/**
 * Deletes a todo task
 * @param {string} taskId - Task ID to delete
 */
function deleteTodo(taskId) {
    window.taskStore.deleteTask(taskId);
    renderTodos();
    renderCalendar(); // Update calendar to remove task
}

/**
 * Date Picker Implementation - Comprehensive Solution
 * 
 * Browser Compatibility Research:
 * - Chrome: Native date picker works well with input[type="date"]
 * - Firefox: Native date picker works, but may need focus() before click()
 * - Safari: Native date picker works, but positioning can be tricky
 * - Edge: Native date picker works well
 * - Mobile: Native date picker is more reliable than desktop
 * 
 * Fallback Strategy:
 * 1. Try native date picker first
 * 2. If native fails, show a simple date input
 * 3. Provide clear user feedback
 */

/**
 * Checks if the browser supports native date picker
 * @returns {boolean} True if native date picker is supported
 */
function isNativeDatePickerSupported() {
    const input = document.createElement('input');
    input.type = 'date';
    return input.type === 'date';
}

/**
 * Gets browser information for debugging
 * @returns {Object} Browser information
 */
function getBrowserInfo() {
    const userAgent = navigator.userAgent;
    let browser = 'Unknown';
    let version = 'Unknown';
    
    if (userAgent.includes('Chrome')) {
        browser = 'Chrome';
        version = userAgent.match(/Chrome\/(\d+)/)?.[1] || 'Unknown';
    } else if (userAgent.includes('Firefox')) {
        browser = 'Firefox';
        version = userAgent.match(/Firefox\/(\d+)/)?.[1] || 'Unknown';
    } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {
        browser = 'Safari';
        version = userAgent.match(/Version\/(\d+)/)?.[1] || 'Unknown';
    } else if (userAgent.includes('Edge')) {
        browser = 'Edge';
        version = userAgent.match(/Edge\/(\d+)/)?.[1] || 'Unknown';
    }
    
    return { browser, version, userAgent };
}

/**
 * Creates a properly positioned date input for native picker
 * @returns {HTMLInputElement} The date input element
 */
function createNativeDateInput() {
    const input = document.createElement('input');
    input.type = 'date';
    input.style.position = 'fixed';
    input.style.top = '50%';
    input.style.left = '50%';
    input.style.transform = 'translate(-50%, -50%)';
    input.style.zIndex = '9999';
    input.style.opacity = '0.01'; // Nearly invisible but accessible
    input.style.pointerEvents = 'auto';
    input.style.fontSize = '16px'; // Prevents zoom on mobile
    
    return input;
}

/**
 * Toggles date picker visibility with comprehensive error handling
 */
function toggleDatePicker() {
    console.log('=== Date Picker Debug ===');
    console.log('Browser Info:', getBrowserInfo());
    console.log('Native Date Picker Supported:', isNativeDatePickerSupported());
    
    // Since native date picker is unreliable across browsers,
    // we'll use our custom fallback dialog which is more consistent
    console.log('Using custom date picker dialog for better reliability');
    showFallbackDateInput();
}

/**
 * Shows a fallback date input when native picker fails
 */
function showFallbackDateInput() {
    console.log('Showing fallback date input');
    
    // Create a simple date input dialog
    const dialog = document.createElement('div');
    dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #333;
        border: 1px solid #666;
        border-radius: 8px;
        padding: 20px;
        z-index: 10000;
        box-shadow: 0 4px 20px rgba(0,0,0,0.5);
        min-width: 300px;
    `;
    
    dialog.innerHTML = `
        <div style="color: #fff; margin-bottom: 15px; font-weight: bold; font-size: 16px;">ðŸ“… Select Due Date</div>
        <div style="margin-bottom: 15px;">
            <label for="fallbackDateInput" style="color: #ccc; font-size: 14px; display: block; margin-bottom: 5px;">Choose a date:</label>
            <input type="date" id="fallbackDateInput" style="
                background: #444;
                border: 1px solid #666;
                color: #fff;
                padding: 10px;
                border-radius: 4px;
                font-size: 14px;
                width: 100%;
                box-sizing: border-box;
            ">
        </div>
        <div style="display: flex; gap: 10px; justify-content: flex-end;">
            <button id="fallbackDateCancel" style="
                background: #666;
                color: #fff;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
            ">Cancel</button>
            <button id="fallbackDateOk" style="
                background: #007bff;
                color: #fff;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
            ">Set Date</button>
        </div>
    `;
    
    document.body.appendChild(dialog);
    
    // Focus the date input
    const dateInput = dialog.querySelector('#fallbackDateInput');
    dateInput.focus();
    
    // Set today's date as default
    const today = new Date().toISOString().split('T')[0];
    dateInput.value = today;
    
    // Handle OK button
    dialog.querySelector('#fallbackDateOk').addEventListener('click', () => {
        const selectedDate = dateInput.value;
        if (selectedDate) {
            updateDateSelection(selectedDate);
        }
        cleanupFallbackDialog(dialog);
    });
    
    // Handle Cancel button
    dialog.querySelector('#fallbackDateCancel').addEventListener('click', () => {
        cleanupFallbackDialog(dialog);
    });
    
    // Handle Enter key
    dateInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            const selectedDate = dateInput.value;
            if (selectedDate) {
                updateDateSelection(selectedDate);
            }
            cleanupFallbackDialog(dialog);
        } else if (event.key === 'Escape') {
            cleanupFallbackDialog(dialog);
        }
    });
    
    // Auto-close on outside click
    setTimeout(() => {
        document.addEventListener('click', (event) => {
            if (!dialog.contains(event.target)) {
                cleanupFallbackDialog(dialog);
            }
        });
    }, 100);
}

/**
 * Updates the date selection in the todo interface
 * @param {string} selectedDate - Selected date in YYYY-MM-DD format
 */
function updateDateSelection(selectedDate) {
    console.log('Date selected:', selectedDate);
    
    // Update the hidden date input
    const dateInput = document.getElementById('todoDueDate');
    if (dateInput) {
        dateInput.value = selectedDate;
    }
    
    // Update the display
    updateDateDisplay();
    
    // Show success feedback
    showDateSelectionFeedback(selectedDate);
}

/**
 * Shows feedback when a date is selected
 * @param {string} selectedDate - Selected date
 */
function showDateSelectionFeedback(selectedDate) {
    const formattedDate = formatDate(selectedDate);
    
    // Update the date display with visual feedback
    const dateDisplay = document.getElementById('todoDateDisplay');
    if (dateDisplay) {
        dateDisplay.textContent = formattedDate;
        dateDisplay.classList.add('text-blue-400');
        
        // Add a brief animation
        dateDisplay.style.transform = 'scale(1.1)';
        setTimeout(() => {
            dateDisplay.style.transform = 'scale(1)';
        }, 200);
    }
    
    console.log('Date selection feedback shown:', formattedDate);
}

/**
 * Updates the date display when a date is selected
 */
function updateDateDisplay() {
    const dateInput = document.getElementById('todoDueDate');
    const dateDisplay = document.getElementById('todoDateDisplay');
    
    if (dateInput && dateDisplay) {
        if (dateInput.value) {
            const formattedDate = formatDate(dateInput.value);
            dateDisplay.textContent = formattedDate;
            dateDisplay.classList.add('text-blue-400');
        } else {
            dateDisplay.textContent = 'Date';
            dateDisplay.classList.remove('text-blue-400');
        }
    }
}

/**
 * Cleans up the date input element
 * @param {HTMLInputElement} dateInput - The date input to clean up
 */
function cleanupDateInput(dateInput) {
    if (dateInput && document.body.contains(dateInput)) {
        document.body.removeChild(dateInput);
    }
}

/**
 * Cleans up the fallback dialog
 * @param {HTMLElement} dialog - The dialog to clean up
 */
function cleanupFallbackDialog(dialog) {
    if (dialog && document.body.contains(dialog)) {
        document.body.removeChild(dialog);
    }
}

/**
 * Handles todo form submission with enhanced UX
 * @param {Event} event - Form submit event
 */
function handleTodoSubmit(event) {
    event.preventDefault();
    
    const input = document.getElementById('todoInput');
    const dateInput = document.getElementById('todoDueDate');
    const text = input.value.trim();
    const dueDate = dateInput.value || null;
    
    if (!text) {
        // Show visual feedback for empty input
        input.classList.add('border-red-500');
        setTimeout(() => input.classList.remove('border-red-500'), 2000);
        return;
    }
    
    addTodo(text, dueDate);
    input.value = '';
    dateInput.value = '';
    updateDateDisplay();
    input.focus();
}

/**
 * Handles keyboard shortcuts for the todo form
 * @param {Event} event - Keydown event
 */
function handleTodoKeyboard(event) {
    // Enter to submit form
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        handleTodoSubmit(event);
    }
    
    // Ctrl/Cmd + D to focus date picker
    if ((event.ctrlKey || event.metaKey) && event.key === 'd') {
        event.preventDefault();
        toggleDatePicker();
    }
}

/**
 * Handles date picker toggle
 * @param {Event} event - Click event
 */
function handleDateToggle(event) {
    event.preventDefault();
    console.log('Date toggle clicked!'); // Debug log
    toggleDatePicker();
}

/**
 * Handles date input change
 * @param {Event} event - Change event
 */
function handleDateChange(event) {
    console.log('Date changed:', event.target.value); // Debug log
    updateDateDisplay();
}

/**
 * Formats a date string for display
 * @param {string} dateStr - Date in 'YYYY-MM-DD' format
 * @returns {string} Formatted date string
 */
function formatDate(dateStr) {
    // Parse the date string properly to avoid timezone issues
    const [year, month, day] = dateStr.split('-').map(Number);
    const date = new Date(year, month - 1, day); // month is 0-indexed in Date constructor
    
    return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric' 
    });
} 